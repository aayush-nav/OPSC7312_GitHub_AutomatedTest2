name: Android CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [29, 30, 31] # Android API levels
        abi: [x86, x86_64] # Emulator architectures (use x86_64 for API 31)
        device: [Nexus 6] # Only testing on Nexus 6

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v2

      # Step 2: Set up Java Development Kit (JDK)
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Step 3: Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      # Step 4: Cache Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}

      # Step 5: Install Android Emulator system images (API 31 uses x86_64)
      - name: Install Emulator
        run: |
          if [ "${{ matrix.api-level }}" == "31" ]; then
            sdkmanager "system-images;android-31;google_apis;x86_64"
          else
            sdkmanager "system-images;android-${{ matrix.api-level }};google_apis;${{ matrix.abi }}"
          fi
          sdkmanager --licenses

      # Step 6: Create and start the emulator with Nexus 6
      - name: Create and Start Emulator
        run: |
          if [ "${{ matrix.api-level }}" == "31" ]; then
            avdmanager create avd -n test -k "system-images;android-31;google_apis;x86_64" -d "${{ matrix.device }}" --force
          else
            avdmanager create avd -n test -k "system-images;android-${{ matrix.api-level }};google_apis;${{ matrix.abi }}" -d "${{ matrix.device }}" --force
          fi
          emulator -avd test -no-window -noaudio &

      # Step 7: Wait for the emulator to boot completely
      - name: Wait for Emulator to Boot
        run: adb wait-for-device shell getprop init.svc.bootanim | grep stopped

      # Step 8: Build the app with Gradle
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # Step 9: Run Android instrumented (UI) tests on the emulator
      - name: Run Tests
        run: ./gradlew connectedAndroidTest

      # Step 10: Kill the emulator after tests
      - name: Kill Emulator
        run: adb -s emulator-5554 emu kill
